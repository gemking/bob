import java.sql.*;
import java.util.*;
import java.io.*;
public class n01052448_Assign4 {
    public static void main(String[] args) throws SQLException, FileNotFoundException {
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";

        Connection myConn = DriverManager.getConnection(dbUrl, userName, password);
        createDatabase(myConn);
        createMatchesTable(myConn);
        createMembersTable(myConn);
        createEarningsTable(myConn);
        createPlayersTable(myConn);
        createTeamsTable(myConn);
        createTournamentsTable(myConn);
        insertIntoMatchesTable(myConn);
        insertIntoMembersTable(myConn);
        insertIntoEarningsTable(myConn);
        insertIntoPlayersTable(myConn);
        insertIntoTeamsTable(myConn);
        insertIntoTournamentsTable(myConn);
        awaitingInput(myConn);
        //runQueryQuestionOne(myConn);
        //runQueryQuestionTwo(String playerid, String team, Connection myConn);
    }

    public static void createDatabase(Connection myConn) {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        try {


            PreparedStatement create = myConn.prepareStatement("CREATE DATABASE IF NOT EXISTS PlayerDB_Assign4");
            create.executeUpdate();
            PreparedStatement use = myConn.prepareStatement("USE PlayerDB_Assign4");
            use.executeQuery();
        } catch (Exception e) {
            System.out.println(e);
            System.out.println("Connection to database unsuccessful");
        } finally {
            System.out.println("Connection to database successful");
            System.out.println("Database Creation Complete");
        }
    }

    public static void createEarningsTable(Connection myConn) {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        try {
            PreparedStatement create = myConn.prepareStatement("CREATE TABLE IF NOT EXISTS Earnings(tournament int, player int, prize_money int, position int, PRIMARY KEY(tournament, player))");
            create.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Earnings Table Creation Complete");
        }
    }

    public static void createMatchesTable(Connection myConn) {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        try {
            PreparedStatement create = myConn.prepareStatement("CREATE TABLE IF NOT EXISTS Matches(match_id int PRIMARY KEY, date DATE, tournament int, playerA int, playerB int, scoreA int, scoreB int, offline Bool)");
            create.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Matches Table Creation Complete");
        }
    }

    public static void createMembersTable(Connection myConn) {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        try {
            PreparedStatement create = myConn.prepareStatement("CREATE TABLE IF NOT EXISTS Members(player int, team int, start_date DATE, end_date DATE, PRIMARY KEY(player, start_date))");
            create.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Members Table Creation Complete");
        }
    }

    public static void createPlayersTable(Connection myConn) {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        try {
            PreparedStatement create = myConn.prepareStatement("CREATE TABLE IF NOT EXISTS Players(player_id int, tag varchar(255), real_name varchar(255), nationality varchar(255), birthday DATE, game_race varchar(255),  PRIMARY KEY(player_id))");
            create.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Players Table Creation Complete");
        }
    }

    public static void createTeamsTable(Connection myConn) {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        try {
            PreparedStatement create = myConn.prepareStatement("CREATE TABLE IF NOT EXISTS Teams(team_id int, name varchar(255), founded DATE, disbanded DATE,  PRIMARY KEY(team_id))");
            create.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Teams Table Creation Complete");
        }
    }

    public static void createTournamentsTable(Connection myConn) {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        try {
            PreparedStatement create = myConn.prepareStatement("CREATE TABLE IF NOT EXISTS Tournaments(tournament_id int, name varchar(255), region varchar(255), major Bool, PRIMARY KEY(tournament_id))");
            create.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Tournaments Table Creation Complete");
        }
    }

    public static void insertIntoMatchesTable(Connection myConn) throws FileNotFoundException {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        StringBuilder x = new StringBuilder();
        String directory = System.getProperty("user.dir") + "/matches_v2.csv";
        Scanner file = new Scanner(new File(directory));
        do {
            x = x.append("(" + file.nextLine() + ")");
            if (file.hasNextLine())
                x.append(",");
        } while (file.hasNextLine());
        try {
            PreparedStatement insert = myConn.prepareStatement("INSERT INTO Matches VALUES " + x.toString());
            insert.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Matches Table Insertion Complete");
        }
    }

    public static void insertIntoMembersTable(Connection myConn) throws FileNotFoundException {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        StringBuilder x = new StringBuilder();
        String directory = System.getProperty("user.dir") + "/members.csv";
        Scanner file = new Scanner(new File(directory));
        do {
            x = x.append("(" + file.nextLine().replaceAll(",$", ",NULL") + ")");

            if (file.hasNextLine())
                x.append(",");
        } while (file.hasNextLine());
        try {
            PreparedStatement insert = myConn.prepareStatement("INSERT INTO Members VALUES " + x.toString());
            //System.out.println(insert.toString());
            insert.execute();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Members Table Insertion Complete");
        }
    }

    public static void insertIntoEarningsTable(Connection myConn) throws FileNotFoundException {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        StringBuilder x = new StringBuilder();
        String directory = System.getProperty("user.dir") + "/earnings.csv";
        Scanner file = new Scanner(new File(directory));
        do {
            x = x.append("(" + file.nextLine() + ")");
            if (file.hasNextLine())
                x.append(",");
        } while (file.hasNextLine());
        try {
            PreparedStatement insert = myConn.prepareStatement("INSERT INTO Earnings VALUES " + x.toString());
            //System.out.println(insert.toString());
            insert.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Earnings Table Insertion Complete");
        }
    }

    public static void insertIntoPlayersTable(Connection myConn) throws FileNotFoundException {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        StringBuilder x = new StringBuilder();
        String directory = System.getProperty("user.dir") + "/players.csv";
        Scanner file = new Scanner(new File(directory));
        do {
            x = x.append("(" + file.nextLine() + ")");
            if (file.hasNextLine())
                x.append(",");
        } while (file.hasNextLine());
        try {
            PreparedStatement insert = myConn.prepareStatement("INSERT INTO Players VALUES " + x.toString());
            insert.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Players Table Insertion Complete");
        }
    }

    public static void insertIntoTeamsTable(Connection myConn) throws FileNotFoundException {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        StringBuilder x = new StringBuilder();
        String directory = System.getProperty("user.dir") + "/teams.csv";
        Scanner file = new Scanner(new File(directory));
        do {
            x = x.append("(" + file.nextLine().replaceAll(",$", ",NULL") + ")");
            if (file.hasNextLine())
                x.append(",");
        } while (file.hasNextLine());
        try {
            PreparedStatement insert = myConn.prepareStatement("INSERT  INTO Teams VALUES " + x.toString());
            //System.out.println(insert.toString());
            insert.executeUpdate();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Teams Table Insertion Complete");
        }
    }

    public static void insertIntoTournamentsTable(Connection myConn) throws FileNotFoundException {
        //Initialize database constants / initialize database constants
        String dbDriver = "com.mysql.jdbc.Driver";
        String dbUrl = "jdbc:mysql://localhost:3306";
        String userName = "root";
        String password = "root";
        StringBuilder x = new StringBuilder();
        String directory = System.getProperty("user.dir") + "/tournaments.csv";
        Scanner file = new Scanner(new File(directory));
        do {
            x = x.append("(" + file.nextLine().replaceAll(",,", ",NULL,") + ")");
            if (file.hasNextLine())
                x.append(",");
        } while (file.hasNextLine());
        try {
            PreparedStatement insert = myConn.prepareStatement("INSERT INTO Tournaments VALUES " + x.toString());
            insert.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            System.out.println("Tournaments Table Insertion Complete");
        }
    }


    public static void runQueryQuestionOne(Connection myConn, String month, String year) {

        try (PreparedStatement statement = myConn.prepareStatement("SELECT P.real_name, P.tag, P.nationality FROM Players P WHERE birthday LIKE '" + year + "-" + month + "%'")) {
            ResultSet rs = statement.executeQuery();
            ResultSetMetaData resultSetMetaData = rs.getMetaData();
            int columnNumber = resultSetMetaData.getColumnCount();
            while (rs.next()) {
                String realName = rs.getString("real_name");
                String tag = rs.getString("tag");
                String nationality = rs.getString("nationality");
                for (int x = 1; x <= columnNumber; x++) {
                    System.out.print(rs.getString(x) + " | ");
                }
                System.out.println();
                //System.out.println(realName + " " + tag + " " + nationality);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void runQueryQuestionTwo(Connection myConn, String playerid, String team) {
        int playerOnTeam = -1;
        try (PreparedStatement statement = myConn.prepareStatement("SELECT * FROM Members WHERE Player=" + playerid + " AND end_date IS NULL LIMIT 1")) {
            ResultSet rs = statement.executeQuery();
            ResultSetMetaData resultSetMetaData = rs.getMetaData();
            int columnNumber = resultSetMetaData.getColumnCount();
            while (rs.next()) {
                //playerOnOtherTeam = rs.getInt("player");
                for (int x = 1; x <= columnNumber; x++) {
                    //System.out.print(rs.getString(x) + " | ");
                }
                System.out.println();
                System.out.println("Query finished executing; check to see if there has been a newly inserted record in the database");
                //System.out.println(realName + " " + tag + " " + nationality);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (playerOnTeam != -1) {
            try (PreparedStatement statement = myConn.prepareStatement("UPDATE Members  SET team=" + team + ", end_date = CURDATE() WHERE player =" + playerOnTeam)) {
                statement.execute();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return;
    } else {//Insert a new member entry
            try (PreparedStatement statement = myConn.prepareStatement("INSERT INTO Members (player, team, start_date) VALUES (" + playerid + ", " + team + ", CURDATE())")) {
                statement.execute();
            } catch (Exception e) {
                System.out.println(e);
            }
            return;
        }
    }

     public static void runQueryQuestionThree(Connection myConn, String nationality, String year) {

        try (PreparedStatement statement = myConn.prepareStatement("SELECT real_name, birthday FROM Players WHERE nationality = '"+nationality+"' AND EXTRACT(YEAR FROM birthday) = "+year+"")) {
            ResultSet rs = statement.executeQuery();
            ResultSetMetaData resultSetMetaData = rs.getMetaData();
            int columnNumber = resultSetMetaData.getColumnCount();
            while (rs.next()) {
                String realName = rs.getString("real_name");
                String birthday = rs.getString("birthday");
                for (int x = 1; x <= columnNumber; x++) {
                    System.out.print(rs.getString(x) + " | ");
                }
                System.out.println();
                //System.out.println(realName + " " + tag + " " + nationality);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void runQueryQuestionFour(Connection myConn) {

        try (PreparedStatement statement = myConn.prepareStatement("SELECT P.tag, P.game_race, T.major \n" +
                "FROM Players P, Earnings E, Tournaments T \n" +
                "WHERE P.player_id = E.player \n" +
                "AND E.tournament = T.tournament_id \n" +
                "AND E.position = 1 \n" +
                "AND T.region = ANY(SELECT T.region\n" +
                "\t\t\t    FROM Tournaments T\n" +
                "\t\t\t\tWHERE T.region IN('EU','AM','KR'))\n" +
                "AND major = 1\n" +
                "GROUP BY tag\n" +
                "HAVING COUNT(distinct region) >= 3;")) {
            ResultSet rs = statement.executeQuery();
            ResultSetMetaData resultSetMetaData = rs.getMetaData();
            int columnNumber = resultSetMetaData.getColumnCount();
            while (rs.next()) {
                String tag = rs.getString("tag");
                String race = rs.getString("game_race");
                String major = rs.getString("major");
                for (int x = 1; x <= columnNumber; x++) {
                    System.out.print(rs.getString(x) + " | ");
                }
                System.out.println();
                //System.out.println(realName + " " + tag + " " + nationality);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void runQueryQuestionFive(Connection myConn) {

        try (PreparedStatement statement = myConn.prepareStatement("SELECT P.tag, P.real_name, MAX(end_date) AS D\n" +
                "FROM PLAYERS P, MEMBERS M,TEAMS T\n" +
                "WHERE P.player_id = M.player\n" +
                "AND M.team = T.team_id\n" +
                "AND T.name = \"ROOT Gaming\"\n" +
                "AND M.end_date IS NOT NULL\n" +
                "AND P.player_id NOT IN\n" +
                "(SELECT M.player\n" +
                "FROM MEMBERS M, TEAMS T\n" +
                "WHERE M.end_date IS NULL\n" +
                "AND M.team=T.team_id\n" +
                "AND T.name = \"ROOT Gaming\"\n" +
                ")\n" +
                "GROUP BY P.tag \n")) {
            ResultSet rs = statement.executeQuery();
            ResultSetMetaData resultSetMetaData = rs.getMetaData();
            int columnNumber = resultSetMetaData.getColumnCount();
            while (rs.next()) {
                String tag = rs.getString("tag");
                String realName= rs.getString("real_name");
                String endDate = rs.getString("D");
                for (int x = 1; x <= columnNumber; x++) {
                    System.out.print(rs.getString(x) + " | ");
                }
                System.out.println();
                //System.out.println(realName + " " + tag + " " + nationality);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void runQueryQuestionSeven(Connection myConn) {

        try (PreparedStatement statement = myConn.prepareStatement("SELECT T.name, T.founded,\n" +
                "SUM(CASE WHEN P.game_race ='P' then 1 ELSE 0 END) AS 'Protoss',\n" +
                "SUM(CASE WHEN P.game_race ='T'  then 1 ELSE 0 END) AS 'Terran',\n" +
                "SUM(CASE WHEN P.game_race ='Z'  then 1 ELSE 0 END) AS 'Zerg'\n" +
                "FROM players P, teams T, members M\n" +
                "WHERE founded < '2011-01-01'  \n" +
                "AND M.end_date IS NULL \n" +
                "AND P.player_id = M.player \n" +
                "AND M.team = T.team_id \n" +
                "AND T.disbanded IS null\n" +
                "GROUP BY T.name\n" +
                "ORDER BY T.name; ")) {
            ResultSet rs = statement.executeQuery();
            ResultSetMetaData resultSetMetaData = rs.getMetaData();
            int columnNumber = resultSetMetaData.getColumnCount();
            while (rs.next()) {
                String name = rs.getString("name");
                String founded = rs.getString("founded");
                String Protoss = rs.getString("Protoss");
                String Terran = rs.getString("Terran");
                String Zerg = rs.getString("Zerg");
                for (int x = 1; x <= columnNumber; x++) {
                    System.out.print(rs.getString(x) + " | ");
                }
                System.out.println();
                //System.out.println(realName + " " + tag + " " + nationality);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }


    public static void awaitingInput(Connection myConn) throws java.sql.SQLException {
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.println("Please type a command below(0 drops database and exits program; 1-7 Query Queries 1-7 respectively");

            while (!scanner.hasNext() && scanner.hasNext()) {
                System.out.println("Error an invalid command has been entered");
                scanner.next();
            }
            while (scanner.hasNext()) {
                String value = scanner.nextLine();
                switch (value) {
                    case "1": {
                        System.out.println("Please type in the month");
                        String month = scanner.nextLine();
                        System.out.println("Please type in the year");
                        String year = scanner.nextLine();
                        if (month.equals("") || year.equals("") || !month.matches("[0-9]+") || !year.matches("[0-9]+")) {
                            System.out.println("Error: Invalid inputted.(Make sure to have a number(not word) for month and a number(not word) for year). Please Try Again. Restart by typing 1 to receive prompts again");
                            break;
                        }
                        runQueryQuestionOne(myConn, month, year);
                        System.out.println("Type exit to leave  or continue inputting numbers 1-7 to invoke queries 1-7");
                        break;
                    }
                }
                switch(value){
                    case "2": {
                        System.out.println("Please type in the player id");
                        String playerid = scanner.nextLine();
                        System.out.println("Please type in the team");
                        String team = scanner.nextLine();
                        if (team.equals("") || team.equals("") || !team.matches("[0-9]+") || !team.matches("[0-9]+")) {
                            System.out.println("Error: Invalid inputted.(Make sure to have a number(not word) for player id and a number(not word) for team). Please Try Again. Restart by typing 2 to receive prompts again");
                            break;
                        }
                        runQueryQuestionTwo(myConn, playerid, team);
                        System.out.println("Type exit to leave or continue inputting numbers 1-7 to invoke queries 1-7");
                        break;
                    }
                }
                switch (value) {
                    case "3": {
                        System.out.println("Please type in your nationality");
                        String nationality = scanner.nextLine();
                        System.out.println("Please type in the year");
                        String year = scanner.nextLine();
                        if (nationality.equals("") || year.equals("") || !nationality.matches( ("[a-zA-Z]+"))|| !year.matches("[0-9]+") ) {
                            System.out.println("Error: Invalid inputted(Make sure to have a word(not number) for nationality and a number(not word) for year). Please Try Again. Restart by typing 3 to receive prompts again");
                            break;
                        }
                        runQueryQuestionThree(myConn, nationality, year);
                        System.out.println("Type exit to leave or continue inputting numbers 1-7 to invoke queries 1-7");
                        break;
                    }
                }
                switch(value){
                    case "4": {
                        runQueryQuestionFour(myConn);
                        System.out.println("Type exit to leave or continue inputting numbers 1-7 to invoke queries 1-7");
                        break;
                    }
                }
                switch(value){
                    case "5":{
                        runQueryQuestionFive(myConn);
                        System.out.println(" Type exit to leave or continue inputting numbers 1-7 to invoke queries 1-7");
                        break;
                    }
                }
                switch(value){
                    case "6":{
                        System.out.println("Query 6 was not implemented; Type exit to leave or continue inputting numbers 1-7 to invoke queries 1-7");
                        break;
                    }
                }
                switch(value){
                    case "7":{
                        runQueryQuestionSeven(myConn);
                        System.out.println("Type exit to leave or continue inputting numbers 1-7 to invoke queries 1-7");
                        break;
                    }
                }
                switch(value){
                    case "exit": {
                        System.out.println("Deleting database...");
                        PreparedStatement delete = myConn.prepareStatement("DROP DATABASE PlayerDB_Assign4");
                        delete.executeUpdate();
                        System.out.println("Database deleted successfully...");
                        System.exit(1);
                    }
                }
            }
        }
    }
}
